use std::fs;
use std::path::{Path, PathBuf};

use feedback_tooltips::enterprise_story;
use mui_system::theme_provider::material_css_baseline_from_theme;

fn main() -> std::io::Result<()> {
    let story = enterprise_story();
    let repo_root = workspace_root();
    let out_root = repo_root.join("target/feedback-tooltips");
    if out_root.exists() {
        fs::remove_dir_all(&out_root)?;
    }
    fs::create_dir_all(&out_root)?;

    for (framework, html) in &story.markup {
        let framework_dir = out_root.join(framework);
        fs::create_dir_all(&framework_dir)?;
        let ssr = ssr_document(&story.theme, html, &story.automation_id);
        fs::write(framework_dir.join("ssr.html"), ssr)?;
        fs::write(
            framework_dir.join("hydrate.rs"),
            hydration_stub(framework, &story.automation_id),
        )?;
        fs::write(
            framework_dir.join("README.md"),
            framework_readme(framework, &story.automation_id),
        )?;
    }

    println!("Generated tooltip bootstrap under {}", out_root.display());
    Ok(())
}

fn workspace_root() -> PathBuf {
    let manifest_dir = Path::new(env!("CARGO_MANIFEST_DIR"));
    manifest_dir
        .ancestors()
        .nth(2)
        .expect("workspace root")
        .to_path_buf()
}

fn ssr_document(theme: &mui_styled_engine::Theme, body: &str, automation_id: &str) -> String {
    let baseline = material_css_baseline_from_theme(theme);
    format!(
        "<!doctype html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>Tooltip SSR snapshot</title>\n    <style>{baseline}</style>\n  </head>\n  <body data-automation-root=\"{automation_id}\">\n    <div id=\"app\">{body}</div>\n    <!-- Hydration scripts mount into #app using the framework specific stub. -->\n  </body>\n</html>\n",
        baseline = baseline,
        automation_id = automation_id,
        body = body
    )
}

fn hydration_stub(framework: &str, automation_id: &str) -> String {
    match framework {
        "yew" => format!(
            "use mui_material::tooltip::yew;\nuse mui_styled_engine::ThemeProvider;\nuse yew::prelude::*;\n\n#[function_component(App)]\nfn app() -> Html {{\n    let story = feedback_tooltips::enterprise_story();\n    let markup = story.markup[\"yew\"].clone();\n    html! {{\n        <ThemeProvider theme={{story.theme.clone()}}>\n            {{ Html::from_html_unchecked(AttrValue::from(markup)) }}\n        </ThemeProvider>\n    }}\n}}\n\nfn main() {{\n    // Attach any analytics listeners to `{automation_id}` before rendering.\n    yew::Renderer::<App>::new().render();\n}}\n",
            automation_id = automation_id
        ),
        "leptos" => format!(
            "use leptos::*;\n\n#[component]\nfn App(cx: Scope) -> impl IntoView {{\n    let story = feedback_tooltips::enterprise_story();\n    let markup = story.markup[\"leptos\"].clone();\n    view! {{ cx,\n        <mui_styled_engine::ThemeProvider theme=story.theme.clone()>\n            <div inner_html=markup></div>\n        </mui_styled_engine::ThemeProvider>\n    }}\n}}\n\nfn main() {{\n    leptos::mount_to_body(App);\n}}\n"
        ),
        "dioxus" => format!(
            "use dioxus::prelude::*;\n\nfn main() {{\n    let story = feedback_tooltips::enterprise_story();\n    let markup = story.markup[\"dioxus\"].clone();\n    LaunchBuilder::new(move || VirtualDom::new(|cx| render! {{ rsx! {{\n        div {{ dangerous_inner_html: markup }}\n    }} }}))\n        .launch();\n}}\n"
        ),
        "sycamore" => format!(
            "use sycamore::prelude::*;\n\n#[component]\nfn App<G: Html>(cx: Scope) -> View<G> {{\n    let story = feedback_tooltips::enterprise_story();\n    let markup = story.markup[\"sycamore\"].clone();\n    view! {{ cx,\n        div(dangerously_set_inner_html = markup)\n    }}\n}}\n\nfn main() {{\n    sycamore::render(|cx| view! {{ cx, <App/> }});\n}}\n"
        ),
        _ => String::new(),
    }
}

fn framework_readme(framework: &str, automation_id: &str) -> String {
    format!(
        "# {framework} tooltip bootstrap\n\n\
The files in this directory are generated by `cargo run --bin bootstrap` from `examples/feedback-tooltips`.\n\
`ssr.html` contains the server-rendered markup while `hydrate.rs` shows how to mount the shared HTML inside the {framework} runtime.\n\
\nKey contracts:\n\
- Automation root: `{automation_id}`\n- Portal ids derive from the automation root ensuring SSR and hydration remain in lock step.\n- Wrap the hydration root with the provided theme so `css_with_theme!` resolves overrides consistently.\n\n"
    )
}
