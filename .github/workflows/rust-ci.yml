name: Rust Workspace CI

on:
  push:
    paths:
      - 'crates/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - '.github/workflows/rust-ci.yml'
  pull_request:
    paths:
      - 'crates/**'
      - 'Cargo.toml'
      - 'Cargo.lock'
      - '.github/workflows/rust-ci.yml'

permissions:
  contents: read

env:
  CARGO_TERM_COLOR: always

jobs:
  lint:
    name: Format and Clippy
    runs-on: ubuntu-latest
    steps:
      # Pull the code so the linter operates on the latest sources
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      # Install stable toolchain with formatting and linting components
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
      # Cache dependencies to speed up repeated CI runs
      - uses: Swatinem/rust-cache@v2
      # Enforce consistent style across the workspace
      - run: cargo xtask fmt --check
      # Fail on any warnings to keep code quality high
      - run: cargo xtask clippy

  test:
    name: Test and Coverage
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository for testing
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      # Install toolchain with LLVM tools required for coverage
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: llvm-tools-preview
      # Reuse build artifacts between runs
      - uses: Swatinem/rust-cache@v2
      # Execute tests and generate coverage in one step
      - run: cargo xtask coverage
      # Publish coverage statistics to external service
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          files: lcov.info
        if: success()

  wasm:
    name: WebAssembly Tests
    runs-on: ubuntu-latest
    steps:
      # Checkout sources for wasm-enabled crates
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      # Install the wasm target for browser-based test execution
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
      # Share compiled artifacts between CI runs
      - uses: Swatinem/rust-cache@v2
      # Install wasm-pack for running browser tests
      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
      # Execute headless browser tests for wasm-enabled crates
      - name: Run wasm tests
        run: cargo xtask wasm-test

  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
      # Checkout repository so documentation reflects current code
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      # Install the standard toolchain
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      # Cache build output to speed up doc rebuilds
      - uses: Swatinem/rust-cache@v2
      # Generate API documentation for all crates
      - run: cargo xtask doc
      # Publish the docs as an artifact so they can be inspected from the CI UI
      - uses: actions/upload-artifact@v4
        with:
          name: rust-docs
          path: target/doc

  bench:
    name: Run Benchmarks
    runs-on: ubuntu-latest
    steps:
      # Checkout source code for benchmarking
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      # Install the Rust toolchain
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      # Cache compiled dependencies for faster benchmarking
      - uses: Swatinem/rust-cache@v2
      # Run any defined Criterion benches; tolerate absence gracefully
      - run: cargo xtask bench
      # Upload benchmark reports for inspection and future comparison
      - uses: actions/upload-artifact@v4
        with:
          name: rust-benchmarks
          path: target/criterion
          if-no-files-found: ignore

  automation:
    name: Docs & Asset Automation
    runs-on: ubuntu-latest
    steps:
      # Checkout repository so automation tasks operate on latest sources
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      # Install Node and pnpm for scripts invoked by xtask
      - uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0
      - uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version: '22.18.0'
          cache: 'pnpm'
      - run: pnpm install
      # Install the Rust toolchain used by cargo-xtask
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      # Regenerate component scaffolding
      - run: cargo xtask update-components
      # Refresh icon bindings from upstream Material icons
      - run: cargo xtask refresh-icons
      # Capture the Joy UI component inventory so regressions surface quickly in diffs
      - name: Generate Joy component parity report
        run: cargo xtask joy-inventory
      # Persist the generated markdown so subsequent jobs (and workflow runs) can diff it cheaply
      - name: Cache Joy parity report
        uses: actions/cache@v4
        with:
          path: docs/joy-component-parity.md
          key: joy-parity-${{ github.sha }}
          restore-keys: |
            joy-parity-
      # Fail fast when the inventory drifts to force contributors to commit the refreshed snapshot
      - name: Ensure Joy parity report committed
        run: git diff --exit-code docs/joy-component-parity.md
      # Run accessibility audits for the documentation site
      - run: cargo xtask accessibility-audit
      # Build the JavaScript documentation site for validation
      - run: cargo xtask build-docs

  publish-check:
    name: Publish Dry Run
    runs-on: ubuntu-latest
    steps:
      # Validate that each crate is ready for publication by running a dry run
      # `cargo publish`. This catches missing metadata or ignored files early.
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2
      - run: |
          for crate in crates/*; do
            if [ -f "$crate/Cargo.toml" ]; then
              (cd "$crate" && cargo publish --dry-run)
            fi
          done

  select-menu-examples:
    name: Select Menu Example Smoke Tests
    runs-on: ubuntu-latest
    steps:
      # Ensure the examples build against the latest shared helpers
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - run: rustup target add wasm32-unknown-unknown
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: select-menu-examples
      - name: Check Yew WASM build
        run: cargo check --target wasm32-unknown-unknown --manifest-path examples/select-menu-yew/Cargo.toml
      - name: SSR snapshot Yew demo
        run: cargo run --manifest-path examples/select-menu-yew/Cargo.toml --no-default-features --features ssr
      - name: Check Leptos WASM build
        run: cargo check --target wasm32-unknown-unknown --manifest-path examples/select-menu-leptos/Cargo.toml
      - name: SSR snapshot Leptos demo
        run: cargo run --manifest-path examples/select-menu-leptos/Cargo.toml --no-default-features --features ssr
